graph TD
    A[Frontend: User Clicks Step] --> B(Frontend: Send /api/step);
    B --> C[Backend: main.py Receives /api/step];
    C --> D[Backend: Processor.run_one_cycle_pipelined];
    subgraph One Clock Cycle Simulation
        D --> E{Hazard Check: HDU.detect_hazards_forwarding};
        E --> F{Forwarding Possible?};
        F -- Yes --> G[Generate Forwarding Signals];
        F -- No --> H{Load-Use/Control Hazard?};
        H -- Yes --> I[Generate Stall Signals];
        H -- No --> J[No Stall/Forward Signals Needed];
        G --> K{Concurrent Stage Execution};
        I --> K;
        J --> K;
        subgraph Stages [Conceptual Concurrency]
            K --> WB(WB: Reg Write?);
            K --> MEM(MEM: Mem Access?);
            K --> EX(EX: ALU Op w/ Forwarded Data? / Bubble?);
            K --> ID(ID: Decode / Stall?);
            K --> IF(IF: Fetch / Stall?);
        end
        WB --> L[Update Pipeline Latches Pass/Hold/NOP];
        MEM --> L;
        EX --> L;
        ID --> L;
        IF --> L;
        L --> M[PC Update Based on Stalls/Branch];
    end
    M --> N[Backend: Update State Regs, PC, Mem, Latches, Stats, Stalls, Forward Paths];
    N --> O[Backend: main.py Gathers State];
    O --> P[Backend: Send JSON Response Pipeline State, Stalls, Forwarding, Stats];
    P --> Q[Frontend: Receive Response];
    Q --> R[Frontend: Update UI Pipeline Diagram w/ Stalls/Glow AND Forwarding Arrows, Regs, Mem, Stats];

    style E fill:#ccf,stroke:#333,stroke-width:2px
    style K fill:#f9f,stroke:#333,stroke-width:2px
    style L fill:#f9f,stroke:#333,stroke-width:2px
    style M fill:#f9f,stroke:#333,stroke-width:2px